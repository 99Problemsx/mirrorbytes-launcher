name: ü§ñ Auto-Merge Pull Requests
on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review:
    types: [submitted]
  check_suite:
    types: [completed]

permissions:
  contents: write
  pull-requests: write
  checks: read

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'check_suite' ||
      github.event.pull_request.user.login == 'dependabot[bot]' ||
      contains(github.event.pull_request.labels.*.name, 'auto-merge')
    steps:
      - name: üîç Check PR Status
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            // Get PR from event or find it from check_suite
            let pr = context.payload.pull_request;
            
            // If no PR in payload (e.g., check_suite event), find PRs for this commit
            if (!pr && context.payload.check_suite) {
              const { data: prs } = await github.rest.repos.listPullRequestsAssociatedWithCommit({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.payload.check_suite.head_sha,
              });
              
              if (prs.length === 0) {
                console.log('No PR found for this check_suite');
                return { canMerge: false };
              }
              
              pr = prs[0]; // Use first PR
              console.log(`Found PR #${pr.number} for check_suite`);
            }
            
            if (!pr) {
              console.log('No PR found in event');
              return { canMerge: false };
            }
            
            // Check if PR should be auto-merged
            const isDependabot = pr.user.login === 'dependabot[bot]';
            const hasAutoMergeLabel = pr.labels.some(label => label.name === 'auto-merge');
            
            if (!isDependabot && !hasAutoMergeLabel) {
              console.log('PR is not from Dependabot and does not have auto-merge label');
              return { canMerge: false };
            }
            
            // ===== BRANCH VALIDATION =====
            const headBranch = pr.head.ref;
            const baseBranch = pr.base.ref;
            
            console.log(`PR: ${headBranch} ‚Üí ${baseBranch}`);
            
            // Define allowed merge patterns
            const allowedMerges = {
              'launcher': ['launcher', 'github'],  // launcher can merge to itself or github
              'game': ['game', 'github'],          // game can merge to itself or github
              'github': ['github'],                // github stays on github
              'dependabot': ['launcher', 'game', 'github'] // dependabot can update any
            };
            
            // Check if head branch matches a pattern
            let isValidMerge = false;
            
            // Dependabot special case
            if (pr.user.login === 'dependabot[bot]') {
              isValidMerge = allowedMerges.dependabot.includes(baseBranch);
            } else {
              // Check if head branch pattern is allowed to merge to base
              for (const [pattern, allowedBases] of Object.entries(allowedMerges)) {
                if (headBranch.startsWith(pattern) || headBranch === pattern) {
                  isValidMerge = allowedBases.includes(baseBranch);
                  if (isValidMerge) break;
                }
              }
            }
            
            if (!isValidMerge) {
              console.log(`‚ùå Invalid merge: ${headBranch} ‚Üí ${baseBranch}`);
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `‚ö†Ô∏è **Auto-merge blocked**: Invalid branch merge pattern.\n\n` +
                      `Trying to merge \`${headBranch}\` ‚Üí \`${baseBranch}\`\n\n` +
                      `Allowed patterns:\n` +
                      `- \`launcher\` ‚Üí \`launcher\` or \`github\`\n` +
                      `- \`game\` ‚Üí \`game\` or \`github\`\n` +
                      `- \`github\` ‚Üí \`github\``,
              });
              return { canMerge: false };
            }
            
            console.log(`‚úÖ Valid merge pattern: ${headBranch} ‚Üí ${baseBranch}`);
            
            // ===== EXISTING CHECKS =====

            // Get PR details
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number,
            });

            // Check if PR is mergeable
            const mergeable = pullRequest.mergeable;
            const mergeableState = pullRequest.mergeable_state;
            
            console.log(`PR #${pr.number} - Mergeable: ${mergeable}, State: ${mergeableState}`);

            // Get status checks
            const { data: statuses } = await github.rest.repos.getCombinedStatusForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.head.sha,
            });

            // Get check runs
            const { data: checkRuns } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.head.sha,
            });

            // Check if all required checks passed
            const statusSuccess = statuses.state === 'success' || statuses.state === 'pending';
            const checksSuccess = checkRuns.check_runs.every(
              check => check.status === 'completed' && check.conclusion === 'success'
            ) || checkRuns.check_runs.length === 0;

            console.log(`Status: ${statuses.state}, Checks passed: ${checksSuccess}`);

            const canMerge = mergeable && (mergeableState === 'clean' || mergeableState === 'unstable') && statusSuccess && checksSuccess;
            
            core.setOutput('can_merge', canMerge);
            core.setOutput('pr_number', pr.number);
            
            return { canMerge, prNumber: pr.number };

      - name: ‚úÖ Enable Auto-Merge
        if: steps.check.outputs.can_merge == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.check.outputs.pr_number }};
            
            try {
              // Enable auto-merge with squash
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                merge_method: 'squash',
              });
              
              console.log(`‚úÖ Auto-merged PR #${prNumber}`);
              
              // Add comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: 'ü§ñ **Auto-merged** - All checks passed! ‚úÖ',
              });
            } catch (error) {
              console.log(`Could not auto-merge: ${error.message}`);
              
              // Add comment about why it couldn't merge
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `‚ö†Ô∏è **Auto-merge failed**: ${error.message}\n\nPlease merge manually.`,
              });
            }

      - name: ‚è≥ Wait for Checks
        if: steps.check.outputs.can_merge != 'true'
        run: |
          echo "‚è≥ Waiting for checks to complete..."
          echo "Current state does not allow auto-merge yet."
          echo "Will retry when checks complete."

  label-auto-merge:
    runs-on: ubuntu-latest
    if: |
      github.event.pull_request.user.login == 'dependabot[bot]' ||
      startsWith(github.event.pull_request.title, '[AUTO]') ||
      startsWith(github.event.pull_request.title, 'chore(deps)')
    steps:
      - name: üè∑Ô∏è Add Auto-Merge Label
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              labels: ['auto-merge'],
            });
            
            console.log('‚úÖ Added auto-merge label');
