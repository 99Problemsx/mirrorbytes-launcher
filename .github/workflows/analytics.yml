name: Repository Analytics

on:
  schedule:
    - cron: '0 0 * * *'  # Daily
  workflow_dispatch:

jobs:
  analytics:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate analytics
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Get repository stats
          const { data: repo } = await github.rest.repos.get({
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          
          // Get contributors
          const { data: contributors } = await github.rest.repos.listContributors({
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          
          // Get recent commits
          const { data: commits } = await github.rest.repos.listCommits({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 10
          });
          
          // Get open issues
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open'
          });
          
          // Generate markdown report
          let report = `# 📊 Illusion Repository Analytics\n\n`;
          report += `**Generated**: ${new Date().toISOString()}\n\n`;
          report += `## 📈 Statistics\n\n`;
          report += `- ⭐ **Stars**: ${repo.stargazers_count}\n`;
          report += `- 👀 **Watchers**: ${repo.watchers_count}\n`;
          report += `- 🍴 **Forks**: ${repo.forks_count}\n`;
          report += `- 🐛 **Open Issues**: ${repo.open_issues_count}\n`;
          report += `- 📝 **Size**: ${(repo.size / 1024).toFixed(2)} MB\n\n`;
          
          report += `## 👥 Top Contributors (${contributors.length})\n\n`;
          contributors.slice(0, 5).forEach((c, i) => {
            report += `${i + 1}. [@${c.login}](${c.html_url}) - ${c.contributions} contributions\n`;
          });
          
          report += `\n## 📅 Recent Activity\n\n`;
          commits.slice(0, 5).forEach(c => {
            const date = new Date(c.commit.author.date).toLocaleDateString();
            report += `- **${date}**: ${c.commit.message.split('\n')[0]}\n`;
          });
          
          report += `\n## 🔥 Hot Issues\n\n`;
          const hotIssues = issues.sort((a, b) => b.comments - a.comments).slice(0, 5);
          hotIssues.forEach(issue => {
            report += `- [#${issue.number}](${issue.html_url}) ${issue.title} (${issue.comments} comments)\n`;
          });
          
          // Write to summary
          core.summary.addRaw(report).write();
          
          console.log('Analytics generated successfully!');
